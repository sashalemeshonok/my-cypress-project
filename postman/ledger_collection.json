{
	"info": {
		"_postman_id": "c6f7cbb8-39b9-4f6f-8b2b-20faa7ff6797",
		"name": "Ledger",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23592784",
		"_collection_link": "https://bold-water-495715.postman.co/workspace/API-TESTS-26.09~d2b20baa-6971-4da3-a677-0863c15ecf9f/collection/23592784-c6f7cbb8-39b9-4f6f-8b2b-20faa7ff6797?action=share&source=collection_link&creator=23592784"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"jwt\", jsonData.jwt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-App-Name",
								"value": "Web Kufar",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\",\n    \"recaptcha_user_response\": \"123\",\n    \"recaptcha_secret_version\": \"test\",\n    \"recaptcha_platform\": \"web\",\n    \"captcha_type\": \"recaptcha\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOGIN}}/v2/auth/signin?token_type=user",
							"host": [
								"{{LOGIN}}"
							],
							"path": [
								"v2",
								"auth",
								"signin"
							],
							"query": [
								{
									"key": "token_type",
									"value": "user"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"int_jwt\", jsonData.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{int_email}}\",\n    \"password\": \"{{int_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{INT_LOGIN}}/v1/sign-in",
							"host": [
								"{{INT_LOGIN}}"
							],
							"path": [
								"v1",
								"sign-in"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get balance",
			"item": [
				{
					"name": "Public get wallet balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"const balance = jsonData.balance;",
									"",
									"pm.test(\"public balance param shoude be exist and be sting\", () => {",
									"    pm.expect(balance).to.be.a('string');",
									"",
									"    if (pm.expect(balance).to.have.lengthOf.at.least(1)) {",
									"        pm.environment.set(\"public_balance\", balance);",
									"    }",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.pre.kuf.by/ledger/v1/wallet/balance?account_id={{user_acc_id}}",
							"protocol": "https",
							"host": [
								"api",
								"pre",
								"kuf",
								"by"
							],
							"path": [
								"ledger",
								"v1",
								"wallet",
								"balance"
							],
							"query": [
								{
									"key": "account_id",
									"value": "{{user_acc_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Internal get wallet balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"const balance = jsonData.balance;",
									"",
									"pm.test(\"internal balance param shoude be exist and be sting\", () => {",
									"    pm.expect(balance).to.be.a('string');",
									"",
									"    if (pm.expect(balance).to.have.lengthOf.at.least(1)) {",
									"        pm.environment.set(\"internal_balance\", balance);",
									"    }",
									"})",
									"",
									"const publicBalance = parseInt(pm.environment.get(\"public_balance\"));",
									"const internalBalance = parseInt(pm.environment.get(\"internal_balance\"));",
									"",
									"pm.test(\"Check that publick balance and internal balance are equal \", () => {",
									"    pm.expect(publicBalance).to.eq(internalBalance)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{WALLET_API_URL}}/balance/{{user_acc_id}}",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"balance",
								"{{user_acc_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Top-up",
			"item": [
				{
					"name": "Top-up action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"balance_new\", jsonData.balance);",
									"",
									"const publicBalance = parseInt(pm.environment.get(\"public_balance\"));",
									"const internalBalance = parseInt(pm.environment.get(\"internal_balance\"));",
									"const newBalance = parseInt(pm.environment.get(\"balance_new\"));",
									"const amount = parseInt(pm.environment.get(\"amount\"));",
									"",
									"pm.test(\"check changes in different types of balance\", () => {",
									"    pm.expect(newBalance).not.equal(publicBalance);",
									"    pm.expect(newBalance).not.equal(internalBalance);",
									"",
									"    const differentPubBalanceAndNewBalance = newBalance - publicBalance;",
									"    const differentIntBalanceAndNewBalance = newBalance - internalBalance;",
									"",
									"    pm.expect(differentPubBalanceAndNewBalance).to.equal(amount);",
									"    pm.expect(differentIntBalanceAndNewBalance).to.equal(amount);",
									"});",
									"",
									"pm.environment.set(\"public_balance\", jsonData.balance);",
									"pm.environment.set(\"internal_balance\", jsonData.balance);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_id\": {{user_acc_id}},\n    \"amount\": {{amount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{WALLET_API_URL}}/top-up",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"top-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history balance after Top-up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"const acc_id = parseInt(pm.environment.get(\"user_acc_id\"));",
									"const amount = parseInt(pm.environment.get(\"amount\"));",
									"",
									"pm.test(\"check transaction in transaction history\", () => {",
									"    if ( jsonData.history.length !== 0) {",
									"        pm.expect(jsonData.history[0][\"account_id\"]).to.equal(acc_id);",
									"        pm.expect(jsonData.history[0][\"payment_amount\"]).to.equal(amount);",
									"        pm.expect(jsonData.history[0][\"transaction_status\"]).to.equal(\"accepted\");",
									"    }",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{WALLET_API_URL}}/history/{{user_acc_id}}?limit=1&offset=0",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"history",
								"{{user_acc_id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "Payment action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"balance_new\", jsonData.balance);",
									"",
									"const publicBalance = parseInt(pm.environment.get(\"public_balance\"));",
									"const internalBalance = parseInt(pm.environment.get(\"internal_balance\"));",
									"const newBalance = parseInt(pm.environment.get(\"balance_new\"));",
									"const amount = parseInt(pm.environment.get(\"amount\"));",
									"",
									"pm.test(\"check changes in different types of balance\", () => {",
									"    pm.expect(newBalance).not.equal(publicBalance);",
									"    pm.expect(newBalance).not.equal(internalBalance);",
									"",
									"    const differentPubBalanceAndNewBalance = publicBalance - newBalance;",
									"    const differentIntBalanceAndNewBalance = internalBalance - newBalance;",
									"",
									"    pm.expect(differentPubBalanceAndNewBalance).to.equal(amount);",
									"    pm.expect(differentIntBalanceAndNewBalance).to.equal(amount);",
									"});",
									"",
									"pm.environment.set(\"public_balance\", jsonData.balance);",
									"pm.environment.set(\"internal_balance\", jsonData.balance);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_id\": {{user_acc_id}},\n    \"amount\": {{amount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{WALLET_API_URL}}/payment",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history balance after Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"const acc_id = parseInt(pm.environment.get(\"user_acc_id\"));",
									"const amount = parseInt(pm.environment.get(\"amount\"));",
									"",
									"pm.test(\"check transaction in transaction history\", () => {",
									"    if ( jsonData.history.length !== 0) {",
									"        pm.expect(jsonData.history[0][\"account_id\"]).to.equal(acc_id);",
									"        pm.expect(jsonData.history[0][\"payment_amount\"]).to.equal(amount);",
									"        pm.expect(jsonData.history[0][\"transaction_status\"]).to.equal(\"accepted\");",
									"    }",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{WALLET_API_URL}}/history/{{user_acc_id}}?limit=1&offset=0",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"history",
								"{{user_acc_id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Refund",
			"item": [
				{
					"name": "Refund action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"balance_new\", jsonData.balance);",
									"",
									"const publicBalance = parseInt(pm.environment.get(\"public_balance\"));",
									"const internalBalance = parseInt(pm.environment.get(\"internal_balance\"));",
									"const newBalance = parseInt(pm.environment.get(\"balance_new\"));",
									"const amount = parseInt(pm.environment.get(\"amount\"));",
									"",
									"pm.test(\"check changes in different types of balance\", () => {",
									"    pm.expect(newBalance).not.equal(publicBalance);",
									"    pm.expect(newBalance).not.equal(internalBalance);",
									"",
									"    const differentPubBalanceAndNewBalance = publicBalance - newBalance ;",
									"    const differentIntBalanceAndNewBalance = internalBalance - newBalance;",
									"",
									"    pm.expect(differentPubBalanceAndNewBalance).to.equal(amount);",
									"    pm.expect(differentIntBalanceAndNewBalance).to.equal(amount);",
									"});",
									"",
									"pm.environment.set(\"public_balance\", jsonData.balance);",
									"pm.environment.set(\"internal_balance\", jsonData.balance);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_id\": {{user_acc_id}},\n    \"amount\": {{amount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{WALLET_API_URL}}/refund",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history balance after Refund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"const acc_id = parseInt(pm.environment.get(\"user_acc_id\"));",
									"const amount = parseInt(pm.environment.get(\"amount\"));",
									"",
									"pm.test(\"check transaction in transaction history\", () => {",
									"    if ( jsonData.history.length !== 0) {",
									"        pm.expect(jsonData.history[0][\"account_id\"]).to.equal(acc_id);",
									"        pm.expect(jsonData.history[0][\"payment_amount\"]).to.equal(amount);",
									"        pm.expect(jsonData.history[0][\"transaction_status\"]).to.equal(\"accepted\");",
									"    }",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{WALLET_API_URL}}/history/{{user_acc_id}}?limit=1&offset=0",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"history",
								"{{user_acc_id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bonus",
			"item": [
				{
					"name": "Bonus action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"balance_new\", jsonData.balance);",
									"",
									"const publicBalance = parseInt(pm.environment.get(\"public_balance\"));",
									"const internalBalance = parseInt(pm.environment.get(\"internal_balance\"));",
									"const newBalance = parseInt(pm.environment.get(\"balance_new\"));",
									"const amount = parseInt(pm.environment.get(\"amount\"));",
									"",
									"pm.test(\"check changes in different types of balance\", () => {",
									"    pm.expect(newBalance).not.equal(publicBalance);",
									"    pm.expect(newBalance).not.equal(internalBalance);",
									"",
									"    const differentPubBalanceAndNewBalance = newBalance - publicBalance;",
									"    const differentIntBalanceAndNewBalance = newBalance - internalBalance;",
									"",
									"    pm.expect(differentPubBalanceAndNewBalance).to.equal(amount);",
									"    pm.expect(differentIntBalanceAndNewBalance).to.equal(amount);",
									"});",
									"",
									"pm.environment.set(\"public_balance\", jsonData.balance);",
									"pm.environment.set(\"internal_balance\", jsonData.balance);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_id\": {{user_acc_id}},\n    \"amount\": {{amount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{WALLET_API_URL}}/bonus",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"bonus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history balance after Bonus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"const acc_id = parseInt(pm.environment.get(\"user_acc_id\"));",
									"const amount = parseInt(pm.environment.get(\"amount\"));",
									"",
									"pm.test(\"check transaction in transaction history\", () => {",
									"    if ( jsonData.history.length !== 0) {",
									"        pm.expect(jsonData.history[0][\"account_id\"]).to.equal(acc_id);",
									"        pm.expect(jsonData.history[0][\"payment_amount\"]).to.equal(amount);",
									"        pm.expect(jsonData.history[0][\"transaction_status\"]).to.equal(\"accepted\");",
									"    }",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{int_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{WALLET_API_URL}}/history/{{user_acc_id}}?limit=1&offset=0",
							"host": [
								"{{WALLET_API_URL}}"
							],
							"path": [
								"history",
								"{{user_acc_id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}