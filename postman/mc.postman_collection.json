{
	"info": {
		"_postman_id": "d69ce8c6-b1c9-444c-b949-a5ea57ac68df",
		"name": "Messaging centre",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3982059",
		"_collection_link": "https://interstellar-eclipse-1668.postman.co/workspace/Work~1f8db2aa-357d-4574-a868-7100e39654eb/collection/3982059-d69ce8c6-b1c9-444c-b949-a5ea57ac68df?action=share&source=collection_link&creator=3982059"
	},
	"item": [
		{
			"name": "Preset",
			"item": [
				{
					"name": "C0. Authorization as Sender",
					"item": [
						{
							"name": "Authorization as sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"jwt_sender\", response.jwt);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "X-App-Name",
										"value": "Web Kufar",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{username_sender}}\",\n    \"password\": \"{{username_passwd}}\",\n    \"recaptcha_platform\": \"web\",\n    \"recaptcha_secret_version\": \"test\",\n    \"recaptcha_user_response\": \"test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authorization_url}}/v2/auth/signin?token_type=user",
									"host": [
										"{{authorization_url}}"
									],
									"path": [
										"v2",
										"auth",
										"signin"
									],
									"query": [
										{
											"key": "token_type",
											"value": "user"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C1. Authorization as Recipient",
					"item": [
						{
							"name": "Authorization recipient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"jwt_recipient\", response.jwt);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "X-App-Name",
										"value": "Web Kufar",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{username_recipient}}\",\n    \"password\": \"{{username_passwd}}\",\n    \"recaptcha_platform\": \"web\",\n    \"recaptcha_secret_version\": \"test\",\n    \"recaptcha_user_response\": \"test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authorization_url}}/v2/auth/signin?token_type=user",
									"host": [
										"{{authorization_url}}"
									],
									"path": [
										"v2",
										"auth",
										"signin"
									],
									"query": [
										{
											"key": "token_type",
											"value": "user"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Operation with conversation",
			"item": [
				{
					"name": "C0. Responce matches rules",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})",
											"",
											"pm.test(\"Verify that all required fields are present in response\", function () {",
											"        var jsonData = pm.response.json()",
											"        pm.expect(jsonData.conversation_id).not.empty",
											"        pm.expect(jsonData.created_at).not.empty",
											"        pm.expect(jsonData.message_id).not.empty",
											"        pm.expect(jsonData.client_message_id).not.empty",
											"        pm.expect(jsonData.message_created_at).not.empty",
											"        pm.expect(jsonData.sequence_id).not.null",
											"})",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        console.log(response.json().conversations[0].conversation_id)",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C1. Send message without auth",
					"item": [
						{
							"name": "Create new conversation without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C2. Can't create conversation with the same UUD",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var conversation_id = pm.response.json().conversation_id",
											"pm.collectionVariables.set(\"created_conversation_id\", conversation_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{$randomWords}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating new conversation with same UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Conversation is already exists\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{created_conversation_id}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{$randomWords}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C3. Verify new conversation appeared in list",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)",
											"pm.environment.set(\"conversation_created_at\", response.created_at)",
											"pm.environment.set(\"created_client_message_id\", response.client_message_id)",
											"pm.environment.set(\"created_message_id\", response.message_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Conversation was created\", function () {",
											"    pm.expect(response.conversation_info.conversation_id).to.equal(pm.environment.get(\"created_conversation_id\"))",
											"})",
											"",
											"pm.test(\"Messages are not empty\", function () {",
											"    pm.expect(response.messages).to.be.not.empty",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C4. Verify message appeared in exist conversation",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)",
											"pm.environment.set(\"conversation_created_at\", response.created_at)",
											"pm.environment.set(\"created_client_message_id\", response.client_message_id)",
											"pm.environment.set(\"created_message_id\", response.message_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send message in exist conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_client_message_id\", response.client_message_id)",
											"pm.environment.set(\"created_message_id\", response.message_id)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_message_id\": \"{{created_client_message_id}}\",\n  \"text\": \"{{message_text}}\",\n  \"type\": \"text\",\n  \"created_at\": \"{{$isoTimestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{interna_url}}/v1/user/{{acc_id_sender}}/conversations/{{created_conversation_id}}",
									"host": [
										"{{interna_url}}"
									],
									"path": [
										"v1",
										"user",
										"{{acc_id_sender}}",
										"conversations",
										"{{created_conversation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Conversation was created\", function () {",
											"    pm.expect(response.conversation_info.last_message.id).to.equal(pm.environment.get(\"created_message_id\"))",
											"})",
											"",
											"pm.test(\"Conversation IDs mathces\", function () {",
											"    pm.expect(response.conversation_info.conversation_id).to.equal(pm.environment.get(\"created_conversation_id\"))",
											"})",
											"",
											"pm.test(\"Messages are not empty\", function () {",
											"    pm.expect(response.messages).to.be.not.empty",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C5. Send image in conversation",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)",
											"pm.environment.set(\"conversation_created_at\", response.created_at)",
											"pm.environment.set(\"created_client_message_id\", response.client_message_id)",
											"pm.environment.set(\"created_message_id\", response.message_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send image in uploader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"created_filename_id\", jsonData.filename);",
											"pm.environment.set(\"created_filename_size\", jsonData.size);",
											"pm.environment.set(\"created_filename_url\", jsonData.download_url);",
											"pm.environment.set(\"created_filename_uuid\", jsonData.uuid);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Receiver-ID",
										"value": "Okk2OSjz9Gn4TU6_VWIizRg",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eff9c60-74fd-4d10-b427-af3467d1d668"
										}
									]
								},
								"url": {
									"raw": "https://messaging-uploader.pre.kuf.by/v2/images",
									"protocol": "https",
									"host": [
										"messaging-uploader",
										"pre",
										"kuf",
										"by"
									],
									"path": [
										"v2",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send image in exist conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"    pm.response.to.be.json",
											"})",
											"",
											"pm.test(\"Verify that all required fields are present in response\", function () {",
											"        var jsonData = pm.response.json()",
											"        pm.expect(jsonData.message_id).not.empty",
											"        pm.expect(jsonData.client_message_id).not.empty",
											"        pm.expect(jsonData.message_ts).not.empty",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_message_id\": \"{{created_client_message_id}}\",\n  \"text\": \"{{message_text}}\",\n  \"type\": \"attachment\",\n   \"attachments\": [\n    {\n    \"id\": \"{{created_filename_uuid}}\",\n    \"type\": \"document\",\n    \"parameters\": {\n      \"file_size\": {{created_filename_size}},\n      \"file_name\": \"{{created_filename_id}}\",\n      \"mime_type\": \"image/jpeg\",\n      \"download_link\": \"{{created_filename_url}}\"\n    }\n  }\n   ],\n  \"created_at\": \"{{$isoTimestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{interna_url}}/v1/user/{{acc_id_sender}}/conversations/{{created_conversation_id}}",
									"host": [
										"{{interna_url}}"
									],
									"path": [
										"v1",
										"user",
										"{{acc_id_sender}}",
										"conversations",
										"{{created_conversation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Attachment was delivered\", function () {",
											"      pm.expect(response.messages[0].attachments[0].id).to.equal(pm.environment.get(\"created_filename_uuid\"))",
											"})",
											"",
											"pm.test(\"Attachment count was encreased\", function () {",
											"      pm.expect(response.conversation_info.last_message.attachments_count).to.eql(1)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "С6. Verify counter increase after new message",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)",
											"pm.environment.set(\"conversation_created_at\", response.created_at)",
											"pm.environment.set(\"created_client_message_id\", response.client_message_id)",
											"pm.environment.set(\"created_message_id\", response.message_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Counter of items increase after new message\", function () {",
											"    pm.expect(response.items).to.eql(1)",
											"})",
											"",
											"pm.test(\"Counter of total message increase after new message\", function () {",
											"    pm.expect(response.conversation_info.total_messages_count).to.eql(1)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "С7. Check mark message as read/unread",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"const getConversationRecipientId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_recipient\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequestRecipient = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_recipient\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})",
											"",
											"pm.sendRequest(getConversationRecipientId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_recipient_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequestRecipient, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)",
											"pm.environment.set(\"conversation_created_at\", response.created_at)",
											"pm.environment.set(\"created_client_message_id\", response.client_message_id)",
											"pm.environment.set(\"created_message_id\", response.message_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Verify message has status unread\", function () {",
											"    pm.expect(response.conversation_info.unseen).to.eql(1)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_recipient}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mark message as read",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_recipient}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{uuid}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations/{{created_conversation_id}}/messages/{{created_message_id}}/read",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations",
										"{{created_conversation_id}}",
										"messages",
										"{{created_message_id}}",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Verify message has status read\", function () {",
											"    pm.expect(response.conversation_info.unseen).to.eql(0)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C8. Check delete conversation",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)",
											"pm.environment.set(\"conversation_created_at\", response.created_at)",
											"pm.environment.set(\"created_client_message_id\", response.client_message_id)",
											"pm.environment.set(\"created_message_id\", response.message_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages by sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Conversation was created\", function () {",
											"    pm.expect(response.conversation_info.conversation_id).to.equal(pm.environment.get(\"created_conversation_id\"))",
											"})",
											"",
											"pm.test(\"Messages are not empty\", function () {",
											"    pm.expect(response.messages).to.be.not.empty",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete conversation by sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"{{created_conversation_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{interna_url}}/v1/user/{{acc_id_sender}}/conversations",
									"host": [
										"{{interna_url}}"
									],
									"path": [
										"v1",
										"user",
										"{{acc_id_sender}}",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages by sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages by recipient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_recipient}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete conversation by recipient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_recipient}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"{{created_conversation_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{interna_url}}/v1/user/{{acc_id_recipient}}/conversations",
									"host": [
										"{{interna_url}}"
									],
									"path": [
										"v1",
										"user",
										"{{acc_id_recipient}}",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages by recipient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_recipient}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_conversation_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_conversation_id}}",
										"messages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C9. Send message to remove conversation",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)",
											"pm.environment.set(\"conversation_created_at\", response.created_at)",
											"pm.environment.set(\"created_client_message_id\", response.client_message_id)",
											"pm.environment.set(\"created_message_id\", response.message_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete conversation by sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"{{created_conversation_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{interna_url}}/v1/user/{{acc_id_sender}}/conversations",
									"host": [
										"{{interna_url}}"
									],
									"path": [
										"v1",
										"user",
										"{{acc_id_sender}}",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send message in exist conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_message_id\": \"{{created_client_message_id}}\",\n  \"text\": \"{{message_text}}\",\n  \"type\": \"text\",\n  \"created_at\": \"{{$isoTimestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{interna_url}}/v1/user/{{acc_id_sender}}/conversations/{{created_conversation_id}}",
									"host": [
										"{{interna_url}}"
									],
									"path": [
										"v1",
										"user",
										"{{acc_id_sender}}",
										"conversations",
										"{{created_conversation_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Block/unblock user",
			"item": [
				{
					"name": "C0. Block /Unblock recipient by sender",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"created_client_message_id\", response.conversation_id)",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get hashed accound id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"pm.environment.set(\"hashed_acc_id\", response.conversation_info.participant_info.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_client_message_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_client_message_id}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block recipient by sender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": \"{{hashed_acc_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/user/block",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"user",
										"block"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Assert that recipient is blocked by sender\", function () {",
											"     pm.expect(response.conversation_info.is_blocked_participant).to.be.true;",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_client_message_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_client_message_id}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock recipient by sender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": \"{{hashed_acc_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/user/unblock",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"user",
										"unblock"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Conversation Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test(\"Assert that recipient is Unblocked by sender\", function () {",
											"     pm.expect(response.conversation_info.is_blocked_participant).to.be.false;",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v3/conversations/{{created_client_message_id}}/messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v3",
										"conversations",
										"{{created_client_message_id}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete conversation for sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"{{created_conversation_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{interna_url}}/v1/user/{{acc_id_sender}}/conversations",
									"host": [
										"{{interna_url}}"
									],
									"path": [
										"v1",
										"user",
										"{{acc_id_sender}}",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete conversation for recipient",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_recipient}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"{{created_conversation_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{interna_url}}/v1/user/{{acc_id_recipient}}/conversations",
									"host": [
										"{{interna_url}}"
									],
									"path": [
										"v1",
										"user",
										"{{acc_id_recipient}}",
										"conversations"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "List of Conversations",
			"item": [
				{
					"name": "C0. Responce matches rules",
					"item": [
						{
							"name": "List of conversations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Limit and offset are equal to query params\", function () {",
											"    pm.expect(pm.environment.get(\"limit\")).equal(\"\" + responseJson.limit);",
											"    pm.expect(pm.environment.get(\"offset\")).equal(\"\" + responseJson.offset)",
											"});",
											"",
											"pm.test(\"Verify that all required fields are present in response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"items\");",
											"    pm.expect(pm.response.text()).to.include(\"limit\");",
											"    pm.expect(pm.response.text()).to.include(\"offset\");",
											"    pm.expect(pm.response.text()).to.include(\"conversations\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" pm.environment.set(\"limit\", \"30\")",
											" pm.environment.set(\"offset\", \"10\")",
											"",
											" const limit = pm.environment.get('limit')",
											" const offset = pm.environment.get('offset')",
											" pm.request.addQueryParams({",
											"        key: \"limit\",",
											"        value: limit",
											"    });",
											"pm.request.addQueryParams({",
											"    key: \"offset\",",
											"    value: offset",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C1. Get list of conversations without auth",
					"item": [
						{
							"name": "List of conversations without Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.removeQueryParams"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401)",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "C2. List of conversations is not empty",
					"item": [
						{
							"name": "Create new conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201)",
											"    pm.response.to.be.json",
											"})",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"created_conversation_id\", response.conversation_id)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getConversationId = {",
											"    url: pm.environment.get(\"base_url\") + '/v3/conversations',",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"};",
											"",
											"const deleteRequest = {",
											"    url: pm.environment.get(\"base_url\") + '/v1/conversations',",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"jwt_sender\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"     body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"ids\": [pm.environment.get(\"created_conversation_id\")]",
											"        })",
											"    }",
											"};",
											"",
											"pm.sendRequest(getConversationId, (err, response) => {",
											"     if (response) {",
											"",
											"        pm.environment.set(\"created_conversation_id\", response.json().conversations[0].conversation_id);",
											"        pm.sendRequest(deleteRequest, () => {});",
											"    } else {",
											"       ",
											"    }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_conversation_id\": \"{{$randomUUID}}\",\n    \"ad_id\": {{ad_id}},\n    \"message\": {\n        \"client_message_id\": \"{{$randomUUID}}\",\n        \"text\": \"{{message_text}}\",\n        \"type\": \"text\",\n        \"created_at\": \"{{$isoTimestamp}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Coversatons body check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Verify that all required fields are present in response\", function () {",
											"        pm.expect(response.conversations.conversation_id).not.null",
											"        pm.expect(response.conversations.ad_info).not.null",
											"        pm.expect(response.conversations.sender_info).not.null",
											"        pm.expect(response.conversations.last_message).not.null",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_sender}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v1/conversations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"conversations"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Unset",
			"item": [
				{
					"name": "Delete conversation for sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_sender}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ids\": [\n    \"{{created_conversation_id}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{interna_url}}/v1/user/{{acc_id_sender}}/conversations",
							"host": [
								"{{interna_url}}"
							],
							"path": [
								"v1",
								"user",
								"{{acc_id_sender}}",
								"conversations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete conversation for recipient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_recipient}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ids\": [\n    \"{{created_conversation_id}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{interna_url}}/v1/user/{{acc_id_recipient}}/conversations",
							"host": [
								"{{interna_url}}"
							],
							"path": [
								"v1",
								"user",
								"{{acc_id_recipient}}",
								"conversations"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "localhost",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "limit",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "offset",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "jwt",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "current_conversation_id",
			"value": ""
		},
		{
			"key": "uuid",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_conversation_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "conversation_created_at",
			"value": "",
			"type": "string"
		},
		{
			"key": "conversation_id",
			"value": ""
		},
		{
			"key": "messages_counter",
			"value": ""
		},
		{
			"key": "created_client_message_id",
			"value": ""
		},
		{
			"key": "created_message_id",
			"value": ""
		}
	]
}